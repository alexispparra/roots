rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // --- Rules for the "users" collection ---
    match /users/{userId} {
      
      // Admin Rule: The administrator can perform any read (get, list) or write (create, update, delete)
      // operation on any user document. This single 'allow read' grants the necessary 'list' permission.
      allow read, write: if request.auth.token.email == 'alexispparra@gmail.com';
      
      // User-specific Rules: A regular user can...
      // 1. Create their own user document.
      allow create: if request.auth.uid == userId;
      // 2. Get and update their own user document.
      allow get, update: if request.auth.uid == userId;
    }
    
    // --- Rules for the "projects" collection ---
    match /projects/{projectId} {
      function isParticipant() {
        // Checks if the requesting user's email is in the project's 'participantsEmails' array.
        return request.auth.token.email in resource.data.participantsEmails;
      }
      function isOwner() {
        // Checks if the requesting user is the original owner of the project.
        return request.auth.token.email == resource.data.ownerEmail;
      }
      
      // Read & Update: Participants can read and update projects they are part of.
      allow read, update: if isParticipant();
      
      // Delete: Only the original owner can delete a project.
      allow delete: if isOwner();
      
      // Create: Any authenticated user can create a new project.
      // The application logic is responsible for correctly setting the initial owner and participant.
      allow create: if request.auth != null;
    }
  }
}
