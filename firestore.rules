
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // USERS COLLECTION
    // A user can create their own profile.
    // A user can read and update their own profile.
    match /users/{userId} {
      allow read, update, create: if request.auth != null && request.auth.uid == userId;
    }

    // PROJECTS COLLECTION
    match /projects/{projectId} {
      // Any authenticated user can create a project.
      allow create: if request.auth != null;

      // Allow reading a project if the user's email is in the participantsEmails array.
      allow read: if request.auth.token.email in resource.data.participantsEmails;

      // A user can list projects if they are authenticated.
      // The actual security of which projects they see is handled by the Firestore query in the app code.
      // This rule is essential to prevent "Missing or insufficient permissions" on the main projects page.
      allow list: if request.auth != null;
      
      // Allow updating a project if the user is a participant with the role 'admin' or 'editor'.
      allow update: if request.auth.token.email in resource.data.participantsEmails &&
                    (get(/databases/$(database)/documents/projects/$(projectId)).data.participants.filter(p => p.email == request.auth.token.email)[0].role == 'admin' ||
                     get(/databases/$(database)/documents/projects/$(projectId)).data.participants.filter(p => p.email == request.auth.token.email)[0].role == 'editor');
      
      // Allow deleting a project only if the user is a participant with the role 'admin'.
      allow delete: if request.auth.token.email in resource.data.participantsEmails &&
                    get(/databases/$(database)/documents/projects/$(projectId)).data.participants.filter(p => p.email == request.auth.token.email)[0].role == 'admin';
    }
  }
}
