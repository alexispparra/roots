rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isAdmin() {
      return request.auth.token.email == 'alexispparra@gmail.com';
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // --- User Profile Rules ---
    match /users/{userId} {
      // Admin can list all users
      allow list: if isAdmin();
      
      // Admin can get any user's profile
      // A user can get their own profile
      allow get: if isAdmin() || isOwner(userId);

      // Admin can update any user's profile
      // A user can update their own profile
      allow update: if isAdmin() || isOwner(userId);
      
      // A user can create their own profile
      allow create: if isOwner(userId);
      
      // Deletes are not allowed for now
      allow delete: if false;
    }

    // --- Project Rules ---
    match /projects/{projectId} {
      
      function isParticipant() {
        return request.auth.token.email in resource.data.participantsEmails;
      }

      function isProjectAdmin() {
        // Use matchesAny to safely iterate through the list of participants on the document
        return isParticipant() && resource.data.participants.matchesAny(p => 
          p.email == request.auth.token.email && p.role == 'admin'
        );
      }
      
      function isProjectEditor() {
        return isParticipant() && resource.data.participants.matchesAny(p => 
          p.email == request.auth.token.email && (p.role == 'admin' || p.role == 'editor')
        );
      }

      // Any authenticated user can create a project
      allow create: if request.auth != null;
      
      // Only participants can read the project
      allow read: if isParticipant();
      
      // Only editors or admins of the project can update it
      allow update: if isProjectEditor();
      
      // Only the admin of the project can delete it
      allow delete: if isProjectAdmin();
    }
  }
}
