
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is an admin for a given project's data
    function isProjectAdmin(projectData) {
      let auth = request.auth;
      if (auth == null) {
        return false;
      }
      // The `filter` method returns a list of elements that match. We check if the list is non-empty.
      return projectData.participants.filter(p => p.email == auth.token.email && p.role == 'admin').size() > 0;
    }

    // Helper function to check if a user can edit (is an editor or admin)
    function canEdit(projectData) {
      let auth = request.auth;
      if (auth == null) {
        return false;
      }
      return projectData.participants.filter(p => p.email == auth.token.email && (p.role == 'admin' || p.role == 'editor')).size() > 0;
    }

    match /projects/{projectId} {
      // CREATE: A user can create a project if they are logged in and they list themselves as the owner and an admin participant.
      allow create: if request.auth != null &&
                       request.resource.data.ownerEmail == request.auth.token.email &&
                       request.auth.token.email in request.resource.data.participantsEmails &&
                       request.resource.data.participants.filter(p => p.email == request.auth.token.email && p.role == 'admin').size() == 1;

      // READ: A user can read a project if their email is in the participants list.
      // The client-side query must enforce this for list operations.
      allow get: if request.auth != null && request.auth.token.email in resource.data.participantsEmails;
      allow list: if request.auth != null && request.query.where.get("participantsEmails") == ["array-contains", request.auth.token.email];

      // UPDATE:
      // - An admin or editor can update most fields.
      // - Only an admin can manage the participants list.
      allow update: if request.auth != null &&
                       canEdit(resource.data) &&
                       // Critical fields like owner and creation date cannot be changed.
                       request.resource.data.ownerEmail == resource.data.ownerEmail &&
                       request.resource.data.createdAt == resource.data.createdAt &&
                       // To modify the participants list, the user must be a project admin.
                       // If the list is not being changed, any editor can proceed.
                       (request.resource.data.participants == resource.data.participants || isProjectAdmin(resource.data));

      // DELETE: Only a project admin can delete a project.
      allow delete: if request.auth != null && isProjectAdmin(resource.data);
    }
  }
}
